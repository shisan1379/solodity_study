{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subscriptionId",
						"type": "uint64"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "want",
						"type": "address"
					}
				],
				"name": "OnlyCoordinatorCanFulfill",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"name": "DiceLanded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "roller",
						"type": "address"
					}
				],
				"name": "DiceRolled",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "house",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rollDice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "s_results",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "s_rollers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "NETWORK: Sepolia",
					"params": {
						"subscriptionId": "subscription id that this consumer contract can use"
					}
				},
				"house(address)": {
					"params": {
						"player": "address"
					},
					"returns": {
						"_0": "house as a string"
					}
				},
				"rollDice()": {
					"details": "Warning: 如果VRF响应延迟，请避免重复调用requestRandomness               因为这将给予矿工/VRF运营商关于哪个VRF响应首先到达的自由度。您必须极其谨慎地审查您的实施细节。"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "构造函数继承 VRFConsumerBaseV2"
				},
				"house(address)": {
					"notice": "Get the house assigned to the player once the address has rolled"
				},
				"rollDice()": {
					"notice": "请求随机数"
				}
			},
			"notice": "Request testnet LINK and ETH here: https://faucets.chain.link/ Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Random/RandomNumberConsumer.sol": "VRFD20"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
			"keccak256": "0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904",
			"license": "MIT",
			"urls": [
				"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360",
				"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4"
			]
		},
		"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
			"keccak256": "0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494",
			"license": "MIT",
			"urls": [
				"bzz-raw://4bd670a55aacc0ab372835cd7e21b487f9fb69d8c6375234b68862a58f3b1153",
				"dweb:/ipfs/QmRMdB9TFLgG1LXg9VSTWbZZ1yf3uY1RY3pPkoMN23JfZk"
			]
		},
		"contracts/Random/RandomNumberConsumer.sol": {
			"keccak256": "0x235ea052f97cd311b06ba0a3ac1f3933068c857826024d38ff75eee7cc12d1b0",
			"license": "MIT",
			"urls": [
				"bzz-raw://165e2279e4c566dd12b8f7d9992402bf88ec7833c4c5c4afafb97e1db5a7ead3",
				"dweb:/ipfs/QmWn4HQKK8BfdPQBE2yr9D7KN3WsmMDzsz3JbwMDFCYoes"
			]
		}
	},
	"version": 1
}